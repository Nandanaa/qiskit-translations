msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-02 16:44+0000\n"
"PO-Revision-Date: 2021-03-30 12:37\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: vi_VN\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Những \"nguyên tố\" của Qiskit"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra, nguyên tố thổ, là nền tảng cho phần còn lại của Qiskit. Terra là khung cho việc thiết kế các phần mềm lượng tử ở cấp độ mạch và xung, nhằm tối ưu hóa chúng tương ứng với những hạn chế của một thiết bị cụ thể và cho phép thực hiện một loạt những thí nghiệm trên các thiết bị điều khiển từ xa. Terra định hình nên giao diện thích hợp cho người dùng, cũng như hiệu quả trong việc điều hành mạng lưới tối ưu, lập lịch trình xung và giao tiếp với backend."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra được tổ chức thành 6 phần chính:"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:`qiskit.circuit` Một mạch lượng tử là một mô hình cho điện toán lượng tử mà các phép tính được thực hiện bởi một chuỗi những phép biến đổi lượng tử (thường là cổng lượng tử) trên một thanh ghi qubit. Một mạch lượng tử thường bắt đầu với các qubit ở trạng thái :math:`|0,...0>` và những cổng này biến các qubit thành một trạng thái khó có thể biểu diễn được trên một máy tính thông thường. Để lấy được thông tin về trạng thái của các qubit, phải có một phép đo trên mạch lượng tử để cho ra kết quả (môt số ngẫu nhiên có thể xảy ra do bản chất của hệ thống lượng tử) trên các thanh ghi thông thường để có thể đọc được dễ dàng."

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod:`qiskit.pulse` Lịch trình xung là một tập hợp xung được truyền đến một thí nghiệm lượng tử và tác động lên một kênh lượng tử (câu lệnh đầu vào thí nghiệm). Việc này xảy ra ở cấp độ thấp hơn mạch lượng tử và yêu cầu mỗi cổng ở trong mạch được biểu diễn dưới dạng một tập hợp xung. Ở cấp độ này, thí nghiệm có thể được thiết kế để giảm thiểu sai sót (phân tách động, giảm thiểu lỗi, và tạo hình xung tối ưu)."

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod:`qiskit.transplier` Một phần quan trọng của nghiên cứu điện toán lượng tử là tìm ra cách để chạy các mạch lượng tử trên thiết bị thật. Trên thực tế, sai số và nhiễu lượng tử gây ra những sai sót trong việc tính toán. Chính vì vậy, để có được ứng dụng thực tiễn cũng chính là giảm số lượng cổng lượng tử và thời gian chạy của mạch lượng tử. Transpiler (trình biên dịch mạch sang mạch) mang đến khái niệm kiểm soát luồng cho phép người dùng đạt được tối ưu và tìm mạch lượng tử phù hợp với thuật toán của họ. Chúng tôi gọi nó là trình biên dịch mạch sang mạch vì kết quả vẫn là một mạch."

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod:`qiskit.providers` Một khi người dùng đã cho mạch lượng tử chạy trên backend họ cần một cách thuận tiện để làm việc với nó. Chúng tôi thực hiện việc này trong Terra thông qua bốn phần:"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "``Provider`` là một lớp con, hiện thực hóa lớp trừu tượng cha :class:`~qiskit.providers.BaseProvider` và cho phép truy cập vào một nhóm những backend khác nhau (ví dụ, backend của `IBM Quantum <https://quantum-computing.ibm.com>`__). Nó tương tác với các backend với một số mục đích như xem backend nào sẵn sàng để dùng, hay thu về một instance của một backend cụ thể."

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseBackend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "``Backend`` là một lớp con, hiện thức hóa lớp trừu tượng cha :class:`~qiskit.providers.BaseBackend` và tượng trưng cho một trình mô phỏng hay một máy tính lượng tử thật và có trách nhiệm chạy các mạch lượng tử và trả lại kết quả. Chúng có một phương pháp chạy đó là tiếp nhận đầu vào là một `qobj` và trả lại một đối tượng `BaseJob`. Đối tượng này cho phép việc chạy riêng biệt của các công việc cho thu về kết quả từ một backend khi tác vụ được hoàn thành."

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "Các instance ``Job`` là việc áp dụng class cơ bản :class:`~qiskit.providers.BaseJob` và có thể được xem như \"vé\" cho tác vụ được gửi đi. Chúng cho ta trạng thái của quá trình thực thi tác vụ ở một thời điểm nhất định (đang trong hàng chờ, đang chạy hay chạy không thành công) và đồng thời cho phép điều khiển tác vụ."

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:`~qiskit.result.Result` Một khi tác vụ được hoàn thành, Terra cho ta thu về kết quả từ backend sử dụng ``result = job.result()``. Đối tượng kết quả này mang theo thông tin lượng tử và cách phổ biến nhất để tương tác với chúng là bằng câu lệnh ``result.get_counts(circuit)``. Phương pháp này cho phép người dùng thu được phép đếm sơ từ mạch lượng tử và áp dụng chúng vào việc phân tích thông qua các công cụ thông tin lượng tử của Terra."

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:`qiskit.quantum_info` Để thực hiện các thuật toán phức tạp hơn và phân tích mạch của máy tính lượng tử, việc có các công cụ để thực hiện các quy trình thông tin lượng tử cơ bản là vô cùng quan trọng. Chúng bao gồm các phương pháp để ước lượng số liệu và tạo ra trạng thái, toán tử và kênh lượng tử."

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:`qiskit.visualization` Trong Terra chúng ta có nhiều công cụ để biểu diễn mạch lượng tử. Việc này cho phép đánh giá các mạch lượng tử để đảm bảo đúng với mong muốn của người dùng. Chúng có định dạng văn bản, python và latex. Một khi mạch đã chạy, việc thu được đầu ra là vô cùng quan trọng. Hàm (:func:`~qiskit.visualization.plot_histogram`) cho phép biểu diễn đầu ra của một mạch lượng tử trên đồ thị bao gồm một phiên bản tương tác. Ngoài ra, các hàm :func:`~qiskit.visualization.plot_state` và :func:`~qiskit.visualization.plot_bloch_vector` cho phép biểu diễn trạng thái lượng tử trên đồ thị."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, nguyên tố 'khí', xuất hiện xuyên suốt trong những nguyên tố của Qiskit. Để thúc tiến sự phát triển của máy tính lượng tử, chúng ta cần các trình mô phỏng, giả lập và debug hiệu quả hơn. Aer giúp chúng ta hiểu được giới hạn của các bộ xử lý thông thường bằng cách cho ta thấy giới hạn của khả năng mô phỏng điện toán lượng tử của chúng. Hơn thế nữa, Aer còn có thể xác minh một cách chính xác chức năng của máy tính lượng tử trong hiện tại và trong tương lai gần. Việc này được thực hiện bằng cách đẩy cao giới hạn của trình mô phỏng và mô phỏng tác dụng của nhiễu với phép toán."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer cung cấp một khung mô phỏng hiệu năng cao cho các mạch lượng tử thông qua các bộ phần mềm của Qiskit. Chúng bao gồm các backend C++ mô phỏng được tối ưu cho việc chạy các mạch được biên dịch bằng Terra. Aer cũng cung cấp công cụ để thiết kế các mô hình nhiễu để mô phỏng những lỗi có thể xảy ra đối với thiết bị thực."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer bao gồm ba backend mô phỏng hiệu năng cao:"

#: ../../the_elements.rst:115
msgid ":class:`~qiskit.providers.aer.QasmSimulator` Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr ":class:`~qiskit.providers.aer.QasmSimulator` Cho phép việc chạy nhiều lần mạch qiskit trong môi trường nhiễu và trả lại phép đếm hoặc phần nhớ. Có nhiều phương pháp để mô phỏng các mạch khác nhau hiệu quả hơn. Chúng bao gồm:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - Sử dụng mô phỏng vector trạng thái chi tiết."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*Stabilizer* Sử dụng mô phỏng ổn định trạng thái Clifford và chỉ có thể được áp dụng đối với mạch Clifford và mô hình nhiễu."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Sử dụng một trình mô phỏng tương đối để phân tách mạch lượng tử thành các kì trạng thái ổn định, với số lượng tăng theo số cổng không phải Clifford."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - sử dụng trình mô phỏng Matrix Product State (MPS)."

#: ../../the_elements.rst:128
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator` Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr ":mod:`~qiskit.providers.aer.StatevectorSimulator` Cho phép việc chạy một lần lí tưởng của các mạch qiskit và trả lại trạng thái cuối cùng của trình mô phỏng sau khi áp dụng."

#: ../../the_elements.rst:132
msgid ":mod:`~qiskit.providers.aer.UnitarySimulator` Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr ":mod:`~qiskit.providers.aer.UnitarySimulator` Cho phép việc chạy một lần lí tưởng của các mạch qiskit và trả lại ma trận thống nhất cuối cùng của mạch. Lưu ý rằng mạch không thể chứa phép đo hoặc các toán tử tái lập đối với backend này."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, nguyên tố \"hỏa\", dành riêng cho việc giảm thiểu nhiễu và lỗi và tạo ra một path mới. Việc này bao gồm phân loại rõ ràng hơn các lỗi, cải thiện các cổng, và tính toán trong môi trường có nhiễu. Ignis được hướng đến những cá nhân muốn thiết kế code lượng tử sửa sai, hoặc muốn nghiên cứu cách phân loại lỗi bằng các phương pháp như chụp cắt lớp, hoặc thậm chí tìm cách để tận dụng các cổng tốt hơn bằng việc khám phá phân tách động và điều khiển tối ưu."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis cung cấp code cho người dùng để có thể dễ dàng tạo các mạch chuyên dụng cho các thí nghiệm cụ thể khi được cung cấp các thông số đầu vào tối thiểu. Code của Ignis bao gồm ba mảng căn bản:"

#: ../../the_elements.rst:157
msgid "**Circuits:**"
msgstr "**Mạch lượng tử:**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "Module mạch cung cấp code để tạo ra danh sách các mạch cho một thí nghiệm Ignis cụ thể dựa trên thông số đầu vào tối thiểu của người dùng. Sau đó chúng sẽ được chạy trên Terra hoặc Aer."

#: ../../the_elements.rst:162
msgid "**Fitters:**"
msgstr "**Fitters:**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Kết quả của một thí nghiệm Ignis được truyền tới một module Fitters và khi đó chúng được phân tích và sửa đổi phù hợp với mô hình vật lý miêu tả thí nghiệm. Fitters có thể đồ thị hóa dữ liệu kèm với việc sửa đổi và cho ra một danh sách các thông số."

#: ../../the_elements.rst:167
msgid "**Filters:**"
msgstr "**Filters:**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Đối với một số thí nghiệm Ignis, fitters có thể cho ra một đối tượng Filter. Các Filter có thể được dùng để giảm thiểu lỗi trong các thí nghiệm khác bằng việc sử dụng trên kết quả căn chỉnh của một thí nghiệm Ignis."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis được phân thành ba loại thí nghiệm có thể được thực hiện:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:`qiskit.iignis.characterization` Thí nghiệm phân loại được thiết kế để đo các thông số trong hệ thống ví dụ như thông số nhiễu (T1, T2-star, T2), các thông số Hamilton như tần suất tương tác ZZ và lỗi điều khiển trong các cổng."

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` Các thí nghiệm xác minh được thiết kế để xác minh hiệu suất của cổng và mạch lượng tử nhỏ.. Việc xác minh bao gồm chụp cắt lớp trạng thái và quy trình, khối lượng lượng tử và điểm chuẩn ngẫu nhiên (randomized benchmarking). Những thử nghiệm này cung cấp thông tin để xác định các chỉ số hiệu suất, chẳng hạn như độ trung thực của cổng."

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:`qiskit.ignis.mitigation` Thí nghiệm giảm thiểu chạy các mạch cân chỉnh đã được phân tích để tạo ra quy trình giảm thiểu có thể được áp dụng với các tập kết quả tùy ý trên cùng một backend. Code của Ignis sẽ tạo ra một danh sách mạch chạy các phép đo cân chỉnh. Kết quả của các phép đo này sẽ được xử lí bởi một Fitter và cho ra một Filter có thể được dùng với các kết quả khác."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, nguyên tố 'nước', là nguyên tố của sự sống. Để làm cho điện toán lượng tử đạt tới mong đợi, chúng ta cần tìm các ứng dụng thực tế. Aqua là nơi thuật toán cho máy tính lượng tử được xây dựng. Những thuật toán này có thể được sử dụng để xây dựng các ứng dụng cho máy tính lượng tử. Aqua phù hợp với tất cả các chuyên gia từ lĩnh vực khác nhau bao gồm hóa học, tối ưu hóa, tài chính và AI. Aqua dành cho tất cả những ai muốn khám phá những lợi ích của việc sử dụng máy tính lượng tử để đạt được tốc độ cao cho các nhiệm vụ tính toán cụ thể."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Một số vấn đề có thể được cải thiện bằng việc sử dụng điện toán lượng tử đã được phát hiện trong nhiều lĩnh vực, ví dụ như Hóa học, Trí tuệ nhân tạo (AI), Tối ưu hóa và Tài chính. Tuy nhiên tính toán lượng tử đòi hỏi các kỹ năng rất chuyên biệt. Để giải quyết nhu cầu của số lượng lớn đề tài các chuyên gia muốn sử dụng và đóng góp ở các mức độ khác nhau của bộ phần mềm, chúng tôi đã tạo ra Qiskit Aqua."

